package com.catt.wfx.web.controller.safeMgr;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.base.pojo.search.Order;
import com.catt.common.module.security.pojo.security.ExtPrincipal;
import com.catt.common.module.security.repository.entity.Right;
import com.catt.common.module.security.repository.entity.Role;
import com.catt.common.module.security.repository.entity.Staff;
import com.catt.common.module.security.service.RightService;
import com.catt.common.module.security.service.RoleService;
import com.catt.common.module.security.service.StaffService;
import com.catt.common.util.collections.MapUtil;
import com.catt.common.util.lang.StringUtil;
import com.catt.common.web.Message;
import com.catt.common.web.controller.BaseController;
import com.catt.common.web.security.shiro.SecurityUtil;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.service.base.pub.SafeMgrBaseService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import util.BuildTree;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Controller("safeMgr.roleController")
@RequestMapping({ "/safeMgr/role" })
public class RoleController extends BaseController {
    @Resource
    private SafeMgrBaseService safeMgrService;

    @Resource(name = "roleServiceImpl")
    private RoleService roleService;

    @Resource(name = "staffServiceImpl")
    private StaffService staffService;

    @Resource(name = "rightServiceImpl")
    private RightService rightService;
    /**
     * 角色管理首页
     * @return
     */
    @RequestMapping(value = "/tree", method = RequestMethod.GET)
    public String index() {
        return "/safeMgr/role/index";
    }

    /**
     * 新增角色
     * @param parentId
     * @param model
     * @return
     */
    @RequestMapping(value = {"/add", "/add/"}, method = RequestMethod.GET)
    public String addEdit(Long parentId, ModelMap model) {

        if (parentId != null) {
            model.addAttribute("parentId", parentId);
        }
        return "/safeMgr/role/addEdit";
    }


    /**
     * 保存
     * @return
     */
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @ResponseBody
    public Message save(@RequestParam Map<String, Object> param) {
        Long parent = MapUtil.getLong(param, "parentId");
        Role bean = new Role();
        bean.setParent(roleService.find(parent));
        bean.setName(MapUtil.getString(param, "name"));
        bean.setRemark(MapUtil.getString(param, "remark"));
        roleService.save(bean);
        return SUCCESS_MSG;
    }

    /**
     * 修改
     * @return
     */
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ResponseBody
    public Message update(@RequestParam Map<String, Object> param) {
        Long id = MapUtil.getLong(param, "id");
        Role bean = roleService.find(id);
        bean.setName(MapUtil.getString(param, "name"));
        bean.setRemark(MapUtil.getString(param,"remark"));
        roleService.update(bean);
//        safeMgrService.updateRole(param);
        return SUCCESS_MSG;
    }

    /**
     * 打开修改角色页面
     * @param parentId
     * @param model
     * @return
     */
    @RequestMapping(value = {"/edit","/edit/"}, method = RequestMethod.GET)
    public String toEditView(Long parentId, ModelMap model) {
        Role role = roleService.find(parentId);
        model.addAttribute("role", role);
        return "/safeMgr/role/addEdit";
    }

    /**
     * 删除角色
     * @param id
     * @return
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Message del(Long id) {
        Assert.notNull(id);
        return Message.success("").addResult(safeMgrService.deleteRole(id));
    }

    /**
     * 查询角色树
     * @param
     * @return
     */
    @RequestMapping(value = "/treeList")
    @ResponseBody
    public Message getTree(@RequestParam Map<String, Object> param) {
        List<Role> list = null;
        String name =  MapUtil.getString(param, "name");
        try {
            ArrayList<Filter> filters = new ArrayList<Filter>();
            if (StringUtil.checkObj(name)) {
                filters.add(Filter.like("name", name));
            }
            List<Order> orders = new ArrayList<>();
            orders.add(Order.asc("createDate"));
            list = roleService.findList(null, filters, orders);
        } catch (Exception e) {
            e.printStackTrace();
        }
        List<Map> returnList = new ArrayList<Map>();
        for (Role bean : list) {
            Long parent = -1l;
            if (StringUtil.checkObj(bean.getParent())) {
                Role par = roleService.find(bean.getParent().getId());
                parent = par.getId();
            }
            bean.setParent(null);
            bean.setChildren(null);
            Map tempMap = new HashMap();
            tempMap.put("name", bean.getName());
            tempMap.put("remark", bean.getRemark());
            tempMap.put("id", bean.getId());
            tempMap.put("parent", parent);
            returnList.add(tempMap);
        }
        List<Map<String, Object>> ls = BuildTree.createTree(returnList, "parent", "id", "id", "name");
        List<Role> backList = new ArrayList<Role>();
        Role rt = new Role();
        rt.setName("角色树");
        rt.setId(-1l);
        Set set = new HashSet();
        set.addAll(ls);
        rt.setChildren(set);
        backList.add(rt);
        return Message.success("").addResult(backList);
    }

    /**
     * 查询角色人员
     * @param id
     * @return
     */
    @RequestMapping(value = "/staffList")
    @ResponseBody
    public List<Staff> getStaffList(Long id, String staffName,String deptName) {
        Role role = roleService.find(id);
        List<Filter> filters = new ArrayList<Filter>();
        filters.add(Filter.like("name", staffName));
        filters.add(Filter.like("name", deptName));
        List<Staff> staffs = staffService.findList(role, null, filters, null);
        return staffs;
    }

    /**
     * 查询权限树
     * 如果有角色ID，则根据角色ID查询角色权限，子角色只能在此基础上分配
     * 否则显示全部权限
     * @param roleId	角色ID
     * @param parentId  上级权限ID
     * @return
     */
    @RequestMapping(value = {"/roleRightTree"})
    @ResponseBody
    public List<Map<String, Object>> getRoleRightTree(Long roleId, Long parentId) {
        Right parent = null;
        if (parentId != null) {
            parent = rightService.find(parentId);
        }

        if (roleId == null) {
            return rightService.findTree(null, parent, null);
        } else {
            Role role = roleService.find(roleId);
            return rightService.findTreeByRole(role, parent);
        }

    }

    /**
     * 更新角色权限
     * @param id
     * @param rightIds
     * @return
     */
    @RequestMapping(value = "/editRight", method = RequestMethod.POST)
    @ResponseBody
    public Message editRight(Long id, Long[] rightIds) {
        Assert.notNull(id);

        Role role = roleService.find(id);

        if (rightIds != null) {
            role.setRights(new HashSet<Right>(rightService.findList(rightIds)));
        } else {
            role.setRights(null);
        }
        roleService.update(role);

        return SUCCESS_MSG;
    }

    /**
	 * getRightChild
	 *
	 * @param param id
	 * @return Message
	 */
	 @RequestMapping(value = "/getRightChild")
	 @ResponseBody
	 public Message getRightChild(@CurrentUser Long userId, @RequestParam Map<String, Object> param) {
         ExtPrincipal principal = SecurityUtil.getPrincipal();
         if (principal == null) {
             return null;
         }
         List<Right> rights = safeMgrService.getRoleMenuRight(userId);
//         List<Right> rights = roleService.getRoleRight(principal.getId());
         if(StringUtil.checkObj(rights)){
             return Message.success("").addResult(rights);
         }
         return ERROR_MSG;
	}

	/**
	 * addRoleRight
	 *
	 * @param param
	 *            id
	 * @return Message
	 */
	@RequestMapping(value = "/addRoleRight")
	@ResponseBody
	public Message addRoleRight(@RequestParam Map<String, Object> param) {
        roleService.addRoleRight(param);
		return SUCCESS_MSG;
	}

	/**
	 * delRoleRight
	 *
	 * @param param
	 *            id
	 * @return Message
	 */
    @RequestMapping(value = "/delRoleRight")
	@ResponseBody
	public Message delRoleRight(@RequestParam Map<String, Object> param) {
        safeMgrService.delRoleRight(param);
		return SUCCESS_MSG;
	}

    /**
     * asyncTreeList
     *
     * @param id
     * @return Message
     */
    @RequestMapping(value = "/asyncTreeList")
    @ResponseBody
    public Message asyncTreeList(Long id) {
        List<Map> listMap = safeMgrService.asyncRoleTreeList(id);
        return Message.success("").addResult(listMap);
    }
}
