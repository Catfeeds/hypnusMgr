package com.catt.wfx.web.controller.admin.basicConfig;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.base.pojo.search.Order;
import com.catt.common.web.Message;
import com.catt.common.web.controller.BaseController;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.repository.data.comEnum.PubEnum;
import com.catt.wfx.repository.entity.productMgr.ProductCate;
import com.catt.wfx.repository.entity.productMgr.ProductCateAttrDefine;
import com.catt.wfx.service.base.productMgr.ProductCateAttrDefineBaseService;
import com.catt.wfx.service.base.productMgr.ProductCateBaseService;
import com.catt.wfx.service.productMgr.ProductCateService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.List;

/**
 * 商品分类设置控制器
 * 作者：袁幸成
 * 时间：2017-1-9 16:06:48
 */
@RequestMapping({"/admin/basicConfig/productCate"})
@Controller("productCateController")
public class ProductCateController extends BaseController{

    //商品分类管理服务
    @Resource(name = "productCateServiceImpl")
    public ProductCateService productCateService;

    //商品分类管理服务
    @Resource(name = "productCateBaseServiceImpl")
    public ProductCateBaseService productCateBaseService;

    //商品分类扩展服务
    @Resource(name = "productCateAttrDefineBaseServiceImpl")
    ProductCateAttrDefineBaseService productCateAttrDefineBaseService;

    /**
     * 跳转到商品参数管理页
     * @return
     */
    @RequestMapping(value = "/index.html")
    public String index(){
        return "/admin/basicConfig/productCate/index";
    }

    /**
     * 跳转到商品类型新增页
     * @return
     */
    @RequestMapping(value = "/addCate.html")
    public String addCate(Long parentId, Model model){
        model.addAttribute("parentId", parentId);
        return "/admin/basicConfig/productCate/addEditCate";
    }

    /**
     * 跳转到商品类型修改页
     * @return
     */
    @RequestMapping(value = "/editCate/{id}")
    public String editCate(@PathVariable("id") Long id, Model model){
        model.addAttribute("entity", productCateBaseService.find(id));
        return "/admin/basicConfig/productCate/addEditCate";
    }

    /**
     * 跳转到商品规格新增修改页addEditSpec.jsp
     * @return
     */
    @RequestMapping(value = "/addEditSpec.html")
    public String addSpec(){
        return "/admin/basicConfig/productCate/addEditSpec";
    }

    /**
     * 跳转到商品规格明细新增页
     * @return
     */
    @RequestMapping(value = "/addSpecDetail.html")
    public String addSpecDetail(){
        return "/admin/basicConfig/productCate/addSpecDetail";
    }

    /**
     * 跳转到商品参数新增修改页
     * @return
     */
    @RequestMapping(value = "/addEditAttr.html")
    public String addEditAttr(){
        return "/admin/basicConfig/productCate/addEditAttr";
    }

    /**
     * 保存商品类型
     * @param userId 操作人标识
     * @param id 分类标识
     * @param name 分类名称
     * @param parentId 分类父ID
     * @return
     */
    @RequestMapping(value = "/saveCate")
    @ResponseBody
    public ProductCate saveCate(@CurrentUser Long userId, @CurrentUser("name") String userName,
                            Long id, String name, Long parentId){
        return  productCateService.saveCate(userId, userName, id, name, parentId);
    }

    /**
     * 删除商品类型
     * @param cateIds 分类标识数组
     * @return
     */
    @RequestMapping(value = "/deleteCate")
    @ResponseBody
    public Message deleteCate(Long[] cateIds){
        Assert.notNull(cateIds);
        productCateService.deleteCate(cateIds);
        return SUCCESS_MSG;
    }

    /**
     * 获取所有类型列表
     * @return
     */
    @RequestMapping(value = "/getAllCate")
    @ResponseBody
    public List<ProductCate> getAllCate(){
        List<Filter> filters = new ArrayList<>();
        filters.add(Filter.eq("delFlag", PubEnum.YesOrNoEnum.NO.getValue()));
        List<Order> orders = new ArrayList<>();
        orders.add(Order.desc("createDate"));
        return productCateBaseService.findList(null, filters, orders);
    }

    /**
     * 获取商品分类扩展
     * @param cateId 分类标识
     * @return
     */
    @RequestMapping(value = "/getCateAttr")
    @ResponseBody
    public ProductCateAttrDefine getCateAttr(Long cateId){
        return this.getCateAttrByCateId(cateId);
    }

    /**
     * 获取商品分类扩展
     * @param cateId 分类标识
     * @return
     */
    private ProductCateAttrDefine getCateAttrByCateId(Long cateId) {
        List<Filter> filters = new ArrayList<>();
        filters.add(Filter.eq("cateId", cateId));
        List<ProductCateAttrDefine> list = productCateAttrDefineBaseService.findList(1, filters, null);
        if (list.size() == 0){
            return new ProductCateAttrDefine();
        }
        return list.get(0);
    }

    /**
     * 保存/删除 商品参数/规格
     * @param userId
     * @param userName
     * @param specJson
     * @param attrDefineJson
     * @return
     */
    @RequestMapping(value = "/saveCateAttr")
    @ResponseBody
    public Message saveCateAttr(@CurrentUser Long userId, @CurrentUser("name") String userName,
                               Long cateId, String specJson, String attrDefineJson, Integer type){
        Assert.notNull(cateId);
        ProductCateAttrDefine productCateAttrDefine = this.getCateAttrByCateId(cateId);
        if (productCateAttrDefine.getId() == null){
            productCateAttrDefine.setCreatedId(userId);
            productCateAttrDefine.setCreatedName(userName);
            productCateAttrDefine.setCateId(cateId);
            productCateAttrDefine.setSpecJson("[]");
            productCateAttrDefine.setAttrDefineJson("[]");
        }
        if (type == 1){ //保存规格
            productCateAttrDefine.setSpecJson(specJson);
        } else {
            productCateAttrDefine.setAttrDefineJson(attrDefineJson);
        }
        productCateAttrDefineBaseService.saveOrUpdate(productCateAttrDefine);
        return SUCCESS_MSG;
    }


}
