package com.catt.wfx.web.controller.guest.wechat.customerMgr;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.module.exception.pojo.BaseException;
import com.catt.common.util.ConfigUtils;
import com.catt.common.util.collections.CollectionUtil;
import com.catt.common.util.collections.MapUtil;
import com.catt.common.util.json.JsonUtils;
import com.catt.common.util.lang.StringUtil;
import com.catt.common.web.Message;
import com.catt.common.web.WebUtil;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.repository.data.comEnum.PubEnum;
import com.catt.wfx.repository.entity.customerMgr.CusInfo;
import com.catt.wfx.repository.entity.orderMgr.CusOrder;
import com.catt.wfx.repository.entity.pub.PubSetup;
import com.catt.wfx.service.AliYunSmsService;
import com.catt.wfx.service.base.customerMgr.CusInfoBaseService;
import com.catt.wfx.service.base.pub.PubSetupBaseService;
import com.catt.wfx.service.customerMgr.CusInfoService;
import com.catt.wfx.service.orderMgr.CusOrderService;
import com.catt.wfx.service.productMgr.ProductPackageService;
import com.catt.wfx.web.controller.pub.CommonController;
import org.apache.commons.codec.digest.DigestUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Description:用户管理controller
 * Created by 2017-02-10  14:51.
 * author: Zhou mingxiang
 */
@RequestMapping({"/guest/wechat/customerMgr/cusInfo"})
@Controller("guest.wechat.customerMgr.CusInfoController")
public class CusInfoController extends CommonController {

    private static Logger logger = LoggerFactory.getLogger(CusInfoController.class);

    // 用户服务
    @Resource(name = "cusInfoServiceImpl")
    private CusInfoService cusInfoService;

    /**
     * 用户服务
     */
    @Resource(name = "cusInfoBaseServiceImpl")
    private CusInfoBaseService cusInfoBaseService;

    // 阿里云短信平台
    @Resource(name = "aliYunSmsServiceImpl")
    private AliYunSmsService loginSmsService;

    // 系统全局设置服务接口
    @Resource(name = "pubSetupBaseServiceImpl")
    private PubSetupBaseService pubSetupBaseService;

    // 开店套餐服务接口
    @Resource(name = "productPackageServiceImpl")
    private ProductPackageService productPackageService;

    // 订单信息表服务接口
    @Resource(name = "cusOrderServiceImpl")
    private CusOrderService cusOrderService;


    /**
     * 用户管理controller
     * @return
     */
    @RequestMapping(value = "/index.html", method = RequestMethod.GET)
    public String index(String invitationNo, Long orderId, String orderCode, Integer orderStatus, Model model) {
        String url ="";
        model.addAttribute("invitationNo",invitationNo);

        Map map1 = new HashMap<>();
        map1.put("orderId", orderId);
        map1.put("orderCode", orderCode);
        map1.put("orderStatus", orderStatus);

        model.addAttribute("orderId",orderId);
        model.addAttribute("orderInfo",map1);

        String openStoreSet = pubSetupBaseService.getSetupByCode(PubSetup.Code.openStoreSet);
        if (StringUtil.checkStr(openStoreSet)) {
            Map map = JsonUtils.toObject(openStoreSet, Map.class);
            Integer needBuyForRegister = MapUtil.getInteger(map, "needBuyForRegister");
            if(needBuyForRegister.equals(1)){
                url =  "/admin/wechat/customerMgr/packageInfo";
            }else {
                url =  "/admin/wechat/customerMgr/setLoginPass";
            }
        }
        return url;
    }
    /**
     * 用户管理controller
     * @return
     */
    @RequestMapping(value = "/setLoginPass.html", method = RequestMethod.GET)
    public String setLoginPass(String invitationNo, Long orderId, String orderCode, Integer orderStatus, Model model) {
        String url ="";
        model.addAttribute("invitationNo",invitationNo);
        Map map1 = new HashMap<>();
        map1.put("orderId", orderId);
        map1.put("orderCode", orderCode);
        map1.put("orderStatus", orderStatus);

        model.addAttribute("orderId",orderId);
        model.addAttribute("orderInfo",map1);

        url =  "/admin/wechat/customerMgr/setLoginPass";
        return url;
    }
    /**
     * 跳转支付成功页面
     *
     * @return
     */
    @RequestMapping(value = "/confirmOrder.html", method = RequestMethod.GET)
    public String confirmOrder(String invitationNo, Model model) {
        model.addAttribute("invitationNo",invitationNo);
        return  "/admin/wechat/customerMgr/confirmOrder";
    }

    /**
     * 跳转支付成功页面
     *
     * @return
     */
    @RequestMapping(value = "/success.html", method = RequestMethod.GET)
    public String success(@RequestHeader("User-Agent") String userAgent,  Model model) {
        String downUrl = "";
        if (userAgent.matches("(?i).*android.*")) { //安卓系
            downUrl = pubSetupBaseService.getSetupByCode(PubSetup.Code.androidDownloadUrl);
        } else if (userAgent.matches("(?i).*(iPhone|ipad).*")) { //苹果系
            downUrl = pubSetupBaseService.getSetupByCode(PubSetup.Code.appleDownloadUrl);
        }

        model.addAttribute("downUrl", downUrl);
        return  "/admin/wechat/customerMgr/success";
    }

//    /**
//     * 跳转支付成功页面
//     *
//     * @return
//     */
//    @RequestMapping(value = "/payOrder.html", method = RequestMethod.GET)
//    public String payOrder(String param,  Model model) {
//        Map map = JsonUtils.toObject(param, Map.class);
//        model.addAttribute("map", map);
//        return  "/admin/wechat/customerMgr/payOrder";
//    }

    /**
     * 注册（无需购买套餐）
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/regisonCusInfo", method = RequestMethod.POST)
    public Message regisonCusInfo(String account, String pwd, String captcha, String invitationNo, @CurrentUser("unionId") String unionId) throws Exception {
        account = decrypt(account);
        pwd = decrypt(pwd);
        captcha = decrypt(captcha);
        Assert.hasText(account, "账号不能为空");
        Assert.hasText(pwd, "密码不能为空");
        Assert.hasText(captcha, "短信验证码不能为空");
        if (loginSmsService.loginMobileNoCheck(account, captcha, ConfigUtils.config.getProperty("register"))) {  // 短信验证通过
            cusInfoService.regisonCusInfo4App(account, DigestUtils.md5Hex(pwd), invitationNo, unionId);
            return Message.success("");
        } else {  // 短信验证不通过
            return Message.warn("短信验证码错误！");
        }
    }


    /**
     * 注册-获取开店设置
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = {"/getOpenStoreSet"}, method = RequestMethod.GET)
    public Message getOpenStoreSet() {
        String openStoreSet = pubSetupBaseService.getSetupByCode(PubSetup.Code.openStoreSet);
        if (StringUtil.checkStr(openStoreSet)) {
            Map map = JsonUtils.toObject(openStoreSet, Map.class);
            return Message.success("").addResult(map);
        } else {
            return Message.error("开店配置暂未设置");
        }
    }

    /**
     * 注册（需要购买套餐）-获取套餐详情
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = {"/getPackageDetail"}, method = RequestMethod.GET)
    public Message getPackageDetail() {
        return Message.success("").addResult(productPackageService.getPackageDetail());
    }

    /**
     * 注册（需要购买套餐）-验证手机
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/checkMobile4Register", method = RequestMethod.POST)
    public Message checkMobile4Register(String mobileNo, String captcha, String invitationNo) throws Exception {
        mobileNo = decrypt(mobileNo);
        captcha = decrypt(captcha);
        Assert.hasText(mobileNo, "手机号码不能为空");
        Assert.hasText(captcha, "短信验证码不能为空");

        if (StringUtil.checkObj(invitationNo)) {
            List<Filter> filters = new ArrayList<Filter>();
            filters.add(Filter.eq("invitationNo", invitationNo.toUpperCase()));
            List<CusInfo> cusInfoList = cusInfoBaseService.findList(null, filters, null);
            if (CollectionUtil.isEmpty(cusInfoList)) {
                throw BaseException.errorByErrInfo("邀请码错误");
            }
        }

        if (loginSmsService.loginMobileNoCheck(mobileNo, captcha, ConfigUtils.config.getProperty("register"))) {  // 短信验证通过
            return Message.success("");
        } else {  // 短信验证不通过
            return Message.warn("短信验证码错误！");
        }
    }

    /**
     * 注册（需要购买套餐）-购买套餐下单
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = {"/order4BuyPackage"}, method = RequestMethod.POST)
    public Message order4BuyPackage(CusOrder cusOrder) {
        return Message.success("").addResult(cusOrderService.order4BuyPackage(cusOrder, null, null));
    }

    /**
     * 忘记密码-验证身份
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/forgetPwdValidate", method = RequestMethod.POST)
    public Message forgetPwdValidate(String mobileNo, String captcha) throws Exception {
        mobileNo = decrypt(mobileNo);
        captcha = decrypt(captcha);
        Assert.hasText(mobileNo, "账号不能为空");
        Assert.hasText(captcha, "短信验证码不能为空");

        // 短信验证码
        if (loginSmsService.loginMobileNoCheck(mobileNo, captcha, ConfigUtils.config.getProperty("forgetPwd"))) {  // 短信验证通过
            // 查询账号和手机号码是否有匹配用户数据，如有则将用户ID存在sesision中以供下一步重置密码
            long num = cusInfoBaseService.count(Filter.eq("account", mobileNo),
                    Filter.eq("delFlag", PubEnum.YesOrNoEnum.NO.getValue()));
            if (num > 0) {
                List<Filter> filters = new ArrayList<>();
                filters.add(Filter.eq("account", mobileNo));
                filters.add(Filter.eq("delFlag", PubEnum.YesOrNoEnum.NO.getValue()));
                WebUtil.getSession().setAttribute("forgetPwdCusId", cusInfoBaseService.findList(1, filters, null).get(0).getId());
                return Message.success("");
            } else {
                return Message.warn("验证手机失败！");
            }
        } else {  // 短信验证不通过
            return Message.warn("短信验证码错误！");
        }
    }

    /**
     * 忘记密码-重置密码
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/forgetPwdReset", method = RequestMethod.POST)
    public Message forgetPwdReset(String password) throws Exception {
        password = decrypt(password);
        Assert.hasText(password, "新密码不能为空");

        // 从session中取出已验证通过的用户标识，并更新密码、移除session
        Long cusId = (Long) WebUtil.getSession().getAttribute("forgetPwdCusId");
        if (cusId != null) {
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            cusInfo.setPwd(DigestUtils.md5Hex(password));
            cusInfoBaseService.update(cusInfo);
            // 移除session
            WebUtil.getSession().removeAttribute("forgetPwdCusId");
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }



    /**
     * 获取订单基本信息
     *
     * @param orderId 订单标识
     * @return
     */
    @RequestMapping(value = "/findOrderInfo", method = RequestMethod.GET)
    @ResponseBody
    public Map findOrderInfo(Long orderId) {
        Assert.notNull(orderId);
        return cusOrderService.findOrderInfo(orderId);
    }
}
