package com.catt.wfx.web.controller.admin.wechat.personal;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.module.attachment.service.AttachmentBaseService;
import com.catt.common.module.exception.pojo.BaseException;
import com.catt.common.util.ConfigUtils;
import com.catt.common.util.collections.CollectionUtil;
import com.catt.common.web.Message;
import com.catt.common.web.WebUtil;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.repository.entity.customerMgr.CusInfo;
import com.catt.wfx.service.AliYunSmsService;
import com.catt.wfx.service.WfxUserService;
import com.catt.wfx.service.base.customerMgr.CusInfoBaseService;
import com.catt.wfx.service.customerMgr.CusInfoService;
import com.catt.wfx.web.controller.pub.CommonController;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import util.MaskUtil;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * Created by xiazanyi on 2017/3/8.
 */
@RequestMapping({"/admin/wechat/personal"})
@Controller("personalController")

public class PersonalController extends CommonController {

    @Resource(name = "wfxUserServiceImpl")
    private WfxUserService wfxUserService;
    // 用户服务
    @Resource(name = "cusInfoServiceImpl")
    private CusInfoService cusInfoService;
    /**
     * 用户服务
     */
    @Resource(name = "cusInfoBaseServiceImpl")
    private CusInfoBaseService cusInfoBaseService;

    // 附件服务
    @Resource(name = "attachmentBaseServiceImpl")
    private AttachmentBaseService attachmentBaseService;

    // 阿里云短信平台
    @Resource(name = "aliYunSmsServiceImpl")
    private AliYunSmsService loginSmsService;

    /**
     * 个人信息界面
     *
     * @return
     */
    @RequestMapping(value = {"/index.html"}, method = RequestMethod.GET)
    public String toIndex(@CurrentUser Long cusId, @CurrentUser("publicAccountId") String publicAccountId
            , @CurrentUser("openId") String openId, Long shopId, Model model, HttpServletRequest request) {
        Assert.notNull(cusId);

        CusInfo tempCus = wfxUserService.getCusPhotoAndName(cusId, publicAccountId, openId, request);
        Map user = cusInfoService.findLoginCusInfo(cusId);
        user.put("photo", tempCus.getPhoto());
        user.put("name", tempCus.getName());
        model.addAttribute("user", user);
        model.addAttribute("shopId", shopId);

        return "/admin/wechat/personal/index";
    }

    /**
     * 修改昵称界面
     *
     * @return
     */
    @RequestMapping(value = {"/modifyName.html"}, method = RequestMethod.GET)
    public String toModifyName(Model model, Long shopId, String name) {
        model.addAttribute("shopId", shopId);
        model.addAttribute("name", name);
        return "/admin/wechat/personal/modifyName";
    }

    /**
     * 修改用户昵称接口
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyNameApi", method = RequestMethod.POST)
    public Message modifyName(@CurrentUser Long cusId, String name, HttpServletRequest request) {
        Assert.notNull(cusId);
        Assert.hasText(name, "昵称不能为空");
        CusInfo cusInfo = cusInfoBaseService.find(cusId);
        cusInfo.setName(name);
        cusInfoBaseService.update(cusInfo);
        wfxUserService.clearCusPhotoAndNameCache(request);
        return Message.success("");
    }

    /**
     * 修改用户头像
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyPhoto", method = RequestMethod.POST)
    public Message modifyPhoto(@CurrentUser Long cusId, Long photo, HttpServletRequest request) {
        Assert.notNull(photo, "头像不能为空");
        attachmentBaseService.saveFile(photo, cusId, CusInfo.TABLE_NAME, CusInfo.PHOTO);
        wfxUserService.clearCusPhotoAndNameCache(request);
        return Message.success("");
    }

    /**
     * 修改手机号界面
     *
     * @return
     */
    @RequestMapping(value = {"/modifyMobile/index.html"}, method = RequestMethod.GET)
    public String toModifyMobile(Model model, Long shopId) {
        model.addAttribute("shopId", shopId);
        return "/admin/wechat/personal/modifyMobile/index";
    }

    /**
     * 修改手机号-原手机号可用
     *
     * @return
     */
    @RequestMapping(value = {"/modifyMobile/useMobile.html"}, method = RequestMethod.GET)
    public String toUseMobile(@CurrentUser Long cusId, Model model, Long shopId) {
        model.addAttribute("shopId", shopId);
        model.addAttribute("mobile", MaskUtil.maskMobileNo(cusInfoBaseService.find(cusId).getMobile()));
        return "/admin/wechat/personal/modifyMobile/useMobile";
    }

    /**
     * 修改手机号-原手机号不可用（使用登录密码）
     *
     * @return
     */
    @RequestMapping(value = {"/modifyMobile/usePwd.html"}, method = RequestMethod.GET)
    public String toUsePwd(Model model, Long shopId) {
        model.addAttribute("shopId", shopId);
        return "/admin/wechat/personal/modifyMobile/usePwd";
    }

    /**
     * 修改手机号-设置新号码页面
     *
     * @return
     */
    @RequestMapping(value = {"/modifyMobile/modify.html"}, method = RequestMethod.GET)
    public String toModify(Model model, Long shopId) {
        model.addAttribute("shopId", shopId);
        return "/admin/wechat/personal/modifyMobile/modify";
    }

    /**
     * 修改手机号码-验证身份
     *
     * @param cusId       当前登录用户ID
     * @param type        验证方式  1-短信验证码，2-原密码
     * @param captcha     type=1时必传，RSA加密，固定公钥加密
     * @param oldPassword type=2时必传，RSA加密，固定公钥加密
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyMobile/modifyMobileValidate", method = RequestMethod.POST)
    public Message modifyMobileValidate(@CurrentUser Long cusId, Integer type, String captcha, String oldPassword) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        Assert.notNull(type);

        if (type == 1) {
            Assert.notNull(captcha);
            captcha = decrypt(captcha);
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            // 短信验证码
            if (loginSmsService.loginMobileNoCheck(cusInfo.getMobile(), captcha, ConfigUtils.config.getProperty("modifyMobile"))) {  // 短信验证通过
                WebUtil.getSession().setAttribute("modifyMobileCusId", cusId);
            } else {  // 短信验证不通过
                return Message.warn("短信验证码错误！");
            }
        } else if (type == 2) {
            Assert.notNull(oldPassword);
            oldPassword = decrypt(oldPassword);
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            if (DigestUtils.md5Hex(oldPassword).equals(cusInfo.getPwd())) {
                WebUtil.getSession().setAttribute("modifyMobileCusId", cusId);
            } else {
                return Message.warn("原密码错误！");
            }
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }


    /**
     * 修改手机号码-设置新号码
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyMobile/modifyMobile", method = RequestMethod.POST)
    public Message modifyMobile(@CurrentUser Long cusId, String mobileNo, String captcha) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        mobileNo = decrypt(mobileNo);
        captcha = decrypt(captcha);
        Assert.hasText(mobileNo, "新手机号码不能为空");
        Assert.hasText(captcha, "验证码不能为空");

        // 从session中取出已验证通过的用户标识
        Long setPayPwdCusId = (Long) WebUtil.getSession().getAttribute("modifyMobileCusId");
        if (cusId.equals(setPayPwdCusId)) {
            // 短信验证码
            if (loginSmsService.loginMobileNoCheck(mobileNo, captcha, ConfigUtils.config.getProperty("modifyMobile"))) {  // 短信验证通过
                List<CusInfo> cusInfoList =
                        cusInfoBaseService.findList(null, Arrays.asList(Filter.eq("mobile", mobileNo)), null);
                if (CollectionUtil.isNotEmpty(cusInfoList)) {
                    throw BaseException.errorByErrInfo("手机号已存在！");
                }

                CusInfo cusInfo = cusInfoBaseService.find(cusId);
                cusInfo.setMobile(mobileNo);
                cusInfo.setAccount(mobileNo); // 更新手机号码的同时，要更新账号为新的手机号码
                cusInfoBaseService.update(cusInfo);
                // 移除session
                WebUtil.getSession().removeAttribute("modifyMobileCusId");
            } else {  // 短信验证不通过
                return Message.warn("短信验证码错误！");
            }
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }
}


