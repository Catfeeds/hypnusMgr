package com.catt.wfx.web.controller.safeMgr;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.base.pojo.search.Page;
import com.catt.common.module.security.repository.entity.Dept;
import com.catt.common.module.security.repository.entity.Domain;
import com.catt.common.module.security.repository.entity.Staff;
import com.catt.common.module.security.service.DeptService;
import com.catt.common.module.security.service.DomainService;
import com.catt.common.module.security.service.StaffService;
import com.catt.common.util.collections.MapUtil;
import com.catt.common.util.lang.DateUtil;
import com.catt.common.util.lang.StringUtil;
import com.catt.common.web.Message;
import com.catt.common.web.WebUtil;
import com.catt.common.web.controller.BaseController;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.service.base.pub.SafeMgrBaseService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by yxc on 2015/7/16.
 */
@Controller("safeMgr.DeptController")
@RequestMapping({"/safeMgr/dept"})
public class DeptController extends BaseController {

    @Resource(name = "staffServiceImpl")
    private StaffService staffService;

    @Resource
    private DeptService deptService;

    @Resource
    private DomainService domainService;

    @Resource(name = "safeMgrBaseServiceImpl")
    private SafeMgrBaseService safeMgrService;

    /**
     * 跳转到部门首页
     *
     * @param model
     * @param param 1.无参数
     *              2.action=check,勾选返回
     *              3.action=check&staffId=?&level=? , 部门树显示人员所在部门及父部门及父部门的父部门...
     *              4.action=check&check=more 可以勾选多个部门
     *              5.action=check&check=more&deptIds=id1,id2 (用,隔开id),用于回显
     *              limit=1 -- 只显示登录人所在部门及其子部门
     * @return
     */
    @RequestMapping(value = {"/index"})
    public String index(@CurrentUser Long userId, Model model, @RequestParam Map<String, Object> param) {
        model.addAllAttributes(param);
        if (StringUtil.checkObj(MapUtil.getString(param, "level"))) {
            return "/safeMgr/dept/index2";
        }
        Integer limit = MapUtil.getInteger(param, "limit");
        if (limit != null && limit == 1) {
            Staff staff = staffService.find(userId);
            Dept dept = deptService.find(staff.getDept().getId());
            if (dept.getParent() == null) {
                param.remove("limit");
            }
        }
        return "/safeMgr/dept/index";
    }

    @RequestMapping(value = "/addEdit", method = RequestMethod.GET)
    public String addEdit(Model model, @RequestParam Map<String, Object> param) {
        Long id = MapUtil.getLong(param, "id");
        if (StringUtil.checkObj(id)) {
            Dept dept = deptService.find(id);
            model.addAttribute("entity", dept);
            if (dept.getParent() != null)
                model.addAttribute("pId", dept.getParent().getId());
        } else {
            Long pId = MapUtil.getLong(param, "pId");
            model.addAttribute("pId", pId);
        }
        return "/safeMgr/dept/addEdit";
    }

    /**
     * 组织目录操作
     *
     * @param param
     * @return
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public Message list(@RequestParam Map<String, Object> param) {
        Long staffId = MapUtil.getLong(param, "staffId");
        Integer level = MapUtil.getInteger(param, "level", 1);
        String path = WebUtil.getRequest().getContextPath();
        if (staffId != null) {
            Map dept = deptService.getDeptTree(staffId, level, path);
            Map map = new HashMap<>();
            map.put("iconOpen", path + "/resources/ztree/zTreeStyle/img/diy/1_open.png");
            map.put("iconClose", path + "/resources/ztree/zTreeStyle/img/diy/1_close.png");
            map.put("rows", dept);
            return Message.success("").addResult(map);
        }
        return Message.success("").addResult("");
    }

    /**
     * 保存、更新
     *
     * @return
     */
    @RequestMapping(value = "/save")
    @ResponseBody
    public Message save(@RequestParam Map<String, Object> param) {
        Long id = MapUtil.getLong(param, "id");
        Integer type = MapUtil.getInteger(param, "type", 1);
        Integer level = MapUtil.getInteger(param, "level", 1);
        Long domainId = MapUtil.getLong(param, "domainId");
        Long pId = MapUtil.getLong(param, "pId");
        String code = MapUtil.getString(param, "code");
        if (!StringUtil.checkObj(code)) {
            code = DateUtil.format(new Date(), "yyyyMMddHHmmssSSS");
        }
        String name = MapUtil.getString(param, "name");
        String shortName = MapUtil.getString(param, "shortName");
        Integer seq = MapUtil.getInteger(param, "seq", 1);
        Domain domain = null;
        if (StringUtil.checkObj(domainId)) {
            domain = domainService.find(1L);
        } else {
            domain = domainService.find(1L);
            if (domain == null) {
                domain = new Domain();
                domain.setId(1L);
                domain.setName("domain");
                domain.setCode("domain");
                domain.setIsDel(false);
                domain.setType(1);
                domain.setSeq(1);
                domainService.saveOrUpdate(domain);
            }
        }
        if(id != null){
            Dept old = deptService.find(id);
            old.setName(name);
            old.setCode(code);
            old.setShortName(shortName);
            old.setSeq(seq);
            deptService.update(old);
        }else{
            Dept dept = new Dept();
            dept.setIsDel(false);
            dept.setDomain(domain);
            dept.setName(name);
            dept.setLevel(level);
            dept.setType(type);
            dept.setCode(code);
            dept.setShortName(shortName);
            dept.setSeq(seq);
            dept.setIsDel(false);
            if (pId != null && pId != -1) {
                Dept father = deptService.find(pId);
                dept.setParent(father);
            }
            deptService.save(dept);
        }
        return SUCCESS_MSG;
    }

    /**
     * 部门删除操作
     *
     * @param param id
     * @return Message
     */
    @RequestMapping(value = "/delete", method = RequestMethod.POST)
    @ResponseBody
    public Message del(@RequestParam Map<String, Object> param) {
        Long id = MapUtil.getLong(param, "id");
        Message msg = new Message();
        Dept dept = deptService.find(id);
        Map<String, Object> param2 = new HashMap<>();
        param2.put("deptId", dept.getId());
        param2.put("pageSize", 1);
        Page<Map> pageList = safeMgrService.findPageByDeptOrRole(param2);
        if (pageList.getTotal() == 0) {
            dept.setIsDel(true);
            deptService.update(dept);
            msg.setResult(1);
            msg.setContent("操作成功！");
        } else {
            msg.setResult(0);
            msg.setContent("该部门下有员工，不能删除！");
        }
        return msg;
    }

    /**
     * 查询培训分类列表
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/treeList")
    @ResponseBody
    public List<Map> treeList(Long id) {
        String path = WebUtil.getRequest().getContextPath();
        return safeMgrService.getTreeList(id, path);
    }

    /**
     * 查询部门树
     *
     * @param param
     * @return
     */
    @RequestMapping(value = "/asyncTreeList")
    @ResponseBody
    public List<Map> asyncTreeList(@CurrentUser Long userId, @RequestParam Map<String, Object> param) {
        String path = WebUtil.getRequest().getContextPath();
        return safeMgrService.getAsyncTreeList(param, path, userId);
    }

    /**
     * 获取部门
     *
     * @param deptIds
     * @return
     */
    @RequestMapping(value = "/getDeptNames", method = RequestMethod.POST)
    @ResponseBody
    public Message getDeptNames(String deptIds) {
        List<Filter> filters = new ArrayList<>();
        filters.add(Filter.in("id", deptIds.split(",")));
        return Message.success("").addResult(deptService.findList(null, filters, null));
    }

}
