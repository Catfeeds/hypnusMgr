package com.catt.wfx.security.shiro.validate.impl;

import com.catt.common.base.pojo.message.MessageConstants;
import com.catt.common.base.pojo.search.Filter;
import com.catt.common.base.repository.entity.BaseUserEntity;
import com.catt.common.module.exception.pojo.BaseException;
import com.catt.common.util.crypto.RSAUtils;
import com.catt.common.util.lang.StringUtil;
import com.catt.common.web.security.shiro.token.ExtAuthenticationToken;
import com.catt.common.web.security.shiro.validate.ObtainUserData;
import com.catt.wfx.repository.data.comEnum.PubEnum;
import com.catt.wfx.repository.entity.customerMgr.CusInfo;
import com.catt.wfx.service.base.customerMgr.CusInfoBaseService;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.security.PrivateKey;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * <pre>
 *
 * @author : Zhang zhongtao
 * @version : Ver 1.0
 * </pre>
 */
@Service("obtainDataCusInfo")
public class ObtainCusInfo implements ObtainUserData {
    /**
     * 私钥
     */
    private static PrivateKey privateKey;
    /**
     * 私钥Base64文本
     */
    @Value("${system.rsa.key.private}")
    private String priKey;
    /**
     * 用户服务
     */
    @Resource(name = "cusInfoBaseServiceImpl")
    private CusInfoBaseService cusInfoBaseService;



    @Override
    public <T extends BaseUserEntity> T getUser(ExtAuthenticationToken token) {
        //用户名
         String account = token.getUsername();
        //前端请求所有参数
         Map map = token.getAllParams();

        String unionId ="";

        String password = (token.getPassword() == null ? "" : new String(token.getPassword()));

        List<Filter> filters = new ArrayList<>();

        if(StringUtil.checkObj(map.get("unionId"))) {
            unionId = ((String[]) map.get("unionId"))[0];
            //微信登录时---微信用户标识(解密密)
            unionId = this.decryptByPrivateKey(unionId);
            filters.add(Filter.eq("weixId", unionId));
        }


        //账号密码登录时
        if(StringUtil.isNotBlank(account)) {
            filters.add(Filter.eq("account", account));
            filters.add(Filter.eq("pwd", DigestUtils.md5Hex(password)));
        }

        filters.add(Filter.eq("delFlag", PubEnum.YesOrNoEnum.NO.getValue()));

        List<CusInfo> list = cusInfoBaseService.findList(null, filters, null);

        //判断账号是否存在
        if (list == null || list.size() == 0) {

            //微信登录时
            if(StringUtil.isNotBlank(unionId)){
                //账号不存在
                throw new UnknownAccountException();
//                throw BaseException.errorByErrInfo("账号不存在！", MessageConstants.Type.warn, 1);
            }else {
                //用户名或密码错误
                throw new IncorrectCredentialsException();
            }
        }
        return (T)  list.get(0);
    }
    /**
     * 固定RSA解密
     *
     * @param source
     *            密文
     * @return String 明文
     */
    protected String decryptByPrivateKey(String source) {
        if (StringUtil.isEmpty(source)) {
            return source;
        }

        if (privateKey == null) {
            try {
                privateKey = RSAUtils.genPrivateKey(getPriKey());
            } catch (Exception e) {
                throw new RuntimeException("获取解密私钥出现异常", e);
            }
        }

        return RSAUtils.decrypt(privateKey, source);
    }

    public String getPriKey() {
        return priKey;
    }

    public void setPriKey(String priKey) {
        this.priKey = priKey;
    }
}
