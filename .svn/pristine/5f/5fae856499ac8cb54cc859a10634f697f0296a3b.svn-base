package com.catt.wfx.service.impl.basicConfig;

import com.catt.common.base.pojo.search.Order;
import com.catt.common.util.collections.MapUtil;
import com.catt.common.util.json.JsonUtils;
import com.catt.common.util.lang.DateUtil;
import com.catt.wfx.repository.entity.basicConfig.WithdrawSet;
import com.catt.wfx.service.base.basicConfig.WithdrawSetBaseService;
import com.catt.wfx.service.basicConfig.WithdrawSetService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service("withdrawSetServiceImpl")
public class WithdrawSetServiceImpl implements WithdrawSetService {

    private final Logger LOG = LoggerFactory.getLogger(WithdrawSetServiceImpl.class);

    @Resource(name = "withdrawSetBaseServiceImpl")
    private WithdrawSetBaseService withdrawSetBaseService;

    /**
     * 获取提现设置数据
     * dateList : 时间段列表
     * limitMoney : 最低限制金额
     *
     * @return
     */
    @Override
    public Map getWithdrawMap() {
        Map result = new HashMap<>();
        //排序
        List<Order> orders = new ArrayList<>();
        orders.add(Order.asc("withdrawStart"));
        List<WithdrawSet> list = withdrawSetBaseService.findList(null, null, orders);
        if(list != null && list.size() > 0){
            List<WithdrawSet> dateList = list;
            Double limitMoney = list.get(0).getWithdrawMoney();
            result.put("dateList", dateList);
            result.put("limitMoney", limitMoney);
        }
        return result;
    }

    /**
     * 保存提现时间
     *
     * @param param
     */
    @Override
    @Transactional
    public void saveWithdrawDate(Map<String, Object> param) {
        Long userId = MapUtil.getLong(param, "userId");
        String userName = MapUtil.getString(param, "userName");
        Double money = MapUtil.getDouble(param, "limitMoney");
        String dateListJson = MapUtil.getString(param, "dateListJson");
        List<String> dateList = JsonUtils.toList(dateListJson, String.class);
        //先全部删除，再保存
        List<WithdrawSet> setList = new ArrayList<>();
        Double limitMoney = null;
        List<WithdrawSet> setlistAll = withdrawSetBaseService.findAll();
        if(setlistAll != null && setlistAll.size() > 0){
            limitMoney = setlistAll.get(0).getWithdrawMoney();
        }
        if(limitMoney == null || limitMoney < 0d){
            limitMoney = money;
        }
        if(limitMoney == null || limitMoney < 0d){
            return;
        }
        for(String date : dateList){
            if(date.indexOf("-") != -1) {//以 - 分隔起止日期
                String[] dates = date.split("-");
                if(dates != null && dates.length >= 2) {
                    WithdrawSet set = new WithdrawSet();
                    set.setCreatedName(userName);
                    set.setCreatedId(userId);
                    set.setWithdrawMoney(limitMoney);
                    set.setWithdrawStart(Integer.parseInt(dates[0]));
                    set.setWithdrawEnd(Integer.parseInt(dates[1]));
                    setList.add(set);
                }
            }
        }
        if(setList.size() > 0) {
            if(setlistAll != null && setlistAll.size() > 0) {
                Long[] delIds = new Long[setlistAll.size()];
                int delCount = 0;
                for (WithdrawSet s : setlistAll) {
                    delIds[delCount++] = s.getId();
                }
                withdrawSetBaseService.delete(delIds);
            }
            LOG.info("提现设置修改记录(提现时间修改):start==============================================");
            LOG.info("当前时间：{}", DateUtil.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
            LOG.info("当前提现限制金额：{}元", limitMoney);
            StringBuilder dates = new StringBuilder();
            for(WithdrawSet set : setList){
                dates.append("\r\n");
                dates.append("每月：");
                dates.append(set.getWithdrawStart());
                dates.append("-");
                dates.append(set.getWithdrawEnd());
                dates.append("号;");
            }
            LOG.info("提现时间修改为：{}", dates.toString());
            LOG.info("提现设置修改记录:end=============================================================");
            withdrawSetBaseService.saveOrUpdate(setList);
        }
    }

    /**
     * 保存最低提现金额
     *
     * @param param
     */
    @Override
    @Transactional
    public void saveWithdrawMoney(Map<String, Object> param) {
        Long userId = MapUtil.getLong(param, "userId");
        String userName = MapUtil.getString(param, "userName");
        Double limitMoney = MapUtil.getDouble(param, "limitMoney");
        List<WithdrawSet> sets = withdrawSetBaseService.findAll();
        if(sets != null && sets.size() > 0) {
            for (WithdrawSet set : sets) {
                set.setCreatedId(userId);
                set.setCreatedName(userName);
                set.setWithdrawMoney(limitMoney);
            }
        }else{
            sets = new ArrayList<>();
            WithdrawSet set = new WithdrawSet();
            set.setCreatedId(userId);
            set.setCreatedName(userName);
            set.setWithdrawMoney(limitMoney);
            sets.add(set);
        }
        LOG.info("提现设置修改记录(提现限制金额修改):start==============================================");
        LOG.info("当前时间：{}", DateUtil.format(new Date(), "yyyy-MM-dd HH:mm:ss"));
        LOG.info("当前提现限制金额修改为：{}元", limitMoney);
        StringBuilder dates = new StringBuilder();
        for(WithdrawSet set : sets){
            dates.append("\r\n");
            dates.append("每月：");
            dates.append(set.getWithdrawStart());
            dates.append("-");
            dates.append(set.getWithdrawEnd());
            dates.append("号;");
        }
        LOG.info("当前提现时间：{}", dates.toString());
        LOG.info("提现设置修改记录:end=================================================================");
        withdrawSetBaseService.saveOrUpdate(sets);
    }
}
