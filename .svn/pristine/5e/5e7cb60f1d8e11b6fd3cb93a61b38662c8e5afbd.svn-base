package com.catt.wfx.web.controller.admin.customerMgr;

import com.catt.common.base.pojo.search.Filter;
import com.catt.common.base.pojo.search.Page;
import com.catt.common.module.attachment.service.AttachmentBaseService;
import com.catt.common.module.exception.pojo.BaseException;
import com.catt.common.util.ConfigUtils;
import com.catt.common.util.collections.CollectionUtil;
import com.catt.common.web.Message;
import com.catt.common.web.WebUtil;
import com.catt.common.web.spring.resolver.annotation.CurrentUser;
import com.catt.wfx.repository.entity.customerMgr.CusInfo;
import com.catt.wfx.service.AliYunSmsService;
import com.catt.wfx.service.base.customerMgr.CusInfoBaseService;
import com.catt.wfx.service.couponMgr.CouponCusService;
import com.catt.wfx.service.customerMgr.CusInfoService;
import com.catt.wfx.web.controller.pub.CommonController;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.annotation.Resource;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

/**
 * Description:用户管理controller
 * Created by 2017-02-10  14:51.
 * author: Zhou mingxiang
 */
@RequestMapping({"/admin/customerMgr/cusInfo"})
@Controller("admin.customerMgr.CusInfoController")
public class CusInfoController extends CommonController {

    // 用户服务
    @Resource(name = "cusInfoServiceImpl")
    private CusInfoService cusInfoService;
    /**
     * 用户服务
     */
    @Resource(name = "cusInfoBaseServiceImpl")
    private CusInfoBaseService cusInfoBaseService;

    //用户代金券服务
    @Resource(name = "couponCusServiceImpl")
    public CouponCusService couponCusService;

    // 附件服务
    @Resource(name = "attachmentBaseServiceImpl")
    private AttachmentBaseService attachmentBaseService;

    // 阿里云短信平台
    @Resource(name = "aliYunSmsServiceImpl")
    private AliYunSmsService loginSmsService;

    /**
     * 获取登录用户基本信息
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/findLoginCusInfo", method = RequestMethod.GET)
    public Message findLoginCusInfo(@CurrentUser Long cusId) {
        return Message.success("").addResult(cusInfoService.findLoginCusInfo(cusId));
    }


    /**
     * 修改用户昵称
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyName", method = RequestMethod.POST)
    public Message modifyName(@CurrentUser Long cusId, String name) {
        Assert.hasText(name, "昵称不能为空");
        CusInfo cusInfo = cusInfoBaseService.find(cusId);
        cusInfo.setName(name);
        cusInfoBaseService.update(cusInfo);
        return Message.success("");
    }


    /**
     * 修改用户头像
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyPhoto", method = RequestMethod.POST)
    public Message modifyPhoto(@CurrentUser Long cusId, Long photo) {
        Assert.notNull(photo, "头像不能为空");
        attachmentBaseService.saveFile(photo, cusId, CusInfo.TABLE_NAME, CusInfo.PHOTO);
        return Message.success("");
    }

    /**
     * 修改登录密码
     *
     * @param cusId       当前登录用户ID
     * @param oldPassword 旧密码，RSA加密，固定公钥加密
     * @param newPassword 新密码，RSA加密，固定公钥加密
     * @return
     */
    @ResponseBody
    @RequestMapping(value = {"/modifyPassword"}, method = RequestMethod.POST)
    public Message modifyPassword(@CurrentUser Long cusId, String oldPassword, String newPassword) throws Exception {
        oldPassword = decrypt(oldPassword);
        newPassword = decrypt(newPassword);

        Assert.hasText(newPassword, "新密码不能为空");

        CusInfo cusInfo = cusInfoBaseService.find(cusId);
        if (cusInfo.getPwd().equals(DigestUtils.md5Hex(oldPassword))) { // 旧密码匹配成功，更新密码
            cusInfo.setPwd(DigestUtils.md5Hex(newPassword));
            cusInfoBaseService.update(cusInfo);
            return Message.success("");
        } else { // 旧密码匹配错误
            return Message.warn("原密码输入错误");
        }
    }

    /**
     * 获取用户代金券列表（分页）
     *
     * @param cusId    客户标识
     * @param status   状态
     * @param pageNo   页码
     * @param pageSize 每页记录数
     * @return
     */
    @RequestMapping(value = "/findCusCoupon", method = RequestMethod.GET)
    @ResponseBody
    public Page<Map> findCusCoupon(@CurrentUser Long cusId, Integer status, Integer pageNo, Integer pageSize) {
        if (pageNo == null) {
            pageNo = 1;
        }
        if (pageSize == null) {
            pageSize = 10;
        }
        return couponCusService.findCusCoupon(cusId, status, pageNo, pageSize);
    }

    /**
     * 修改支付密码
     *
     * @param cusId       当前登录用户ID
     * @param oldPassword 旧密码，RSA加密，固定公钥加密
     * @param newPassword 新密码，RSA加密，固定公钥加密
     * @return
     */
    @ResponseBody
    @RequestMapping(value = {"/modifyPayPwd"}, method = RequestMethod.POST)
    public Message modifyPayPwd(@CurrentUser Long cusId, String oldPassword, String newPassword) throws Exception {
        oldPassword = decrypt(oldPassword);
        newPassword = decrypt(newPassword);

        CusInfo cusInfo = cusInfoBaseService.find(cusId);
        if (DigestUtils.md5Hex(oldPassword).equals(cusInfo.getPayPwd())) { // 旧密码匹配成功，更新密码
            cusInfo.setPayPwd(DigestUtils.md5Hex(newPassword));
            cusInfoBaseService.update(cusInfo);
            return Message.success("");
        } else { // 旧密码匹配错误
            return Message.warn("原密码错误");
        }
    }

    /**
     * 设置/重置支付密码-验证身份
     *
     * @param cusId   当前登录用户ID
     * @param captcha 验证码
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/setPayPwdValidate", method = RequestMethod.POST)
    public Message setPayPwdValidate(@CurrentUser Long cusId, String captcha) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        Assert.notNull(captcha);
        captcha = decrypt(captcha);
        CusInfo cusInfo = cusInfoBaseService.find(cusId);
        // 短信验证码
        if (loginSmsService.loginMobileNoCheck(cusInfo.getMobile(), captcha, ConfigUtils.config.getProperty("setPayPwd"))) {  // 短信验证通过
            WebUtil.getSession().setAttribute("setPayPwdCusId", cusId);
        } else {  // 短信验证不通过
            return Message.warn("短信验证码错误！");
        }

        return Message.success("");
    }

    /**
     * 设置/重置支付密码-重置密码
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/setPayPwd", method = RequestMethod.POST)
    public Message setPayPwd(@CurrentUser Long cusId, String password) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        password = decrypt(password);
        Assert.hasText(password, "新密码不能为空");

        // 从session中取出已验证通过的用户标识，并更新支付密码、移除session
        Long setPayPwdCusId = (Long) WebUtil.getSession().getAttribute("setPayPwdCusId");
        if (cusId.equals(setPayPwdCusId)) {
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            cusInfo.setPayPwd(DigestUtils.md5Hex(password));
            cusInfoBaseService.update(cusInfo);
            // 移除session
            WebUtil.getSession().removeAttribute("setPayPwdCusId");
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }

    /**
     * 修改手机号码-验证身份
     *
     * @param cusId       当前登录用户ID
     * @param type        验证方式  1-短信验证码，2-原密码
     * @param captcha     type=1时必传，RSA加密，固定公钥加密
     * @param oldPassword type=2时必传，RSA加密，固定公钥加密
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyMobileValidate", method = RequestMethod.POST)
    public Message modifyMobileValidate(@CurrentUser Long cusId, Integer type, String captcha, String oldPassword) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        Assert.notNull(type);

        if (type == 1) {
            Assert.notNull(captcha);
            captcha = decrypt(captcha);
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            // 短信验证码
            if (loginSmsService.loginMobileNoCheck(cusInfo.getMobile(), captcha, ConfigUtils.config.getProperty("modifyMobile"))) {  // 短信验证通过
                WebUtil.getSession().setAttribute("modifyMobileCusId", cusId);
            } else {  // 短信验证不通过
                return Message.warn("短信验证码错误！");
            }
        } else if (type == 2) {
            Assert.notNull(oldPassword);
            oldPassword = decrypt(oldPassword);
            CusInfo cusInfo = cusInfoBaseService.find(cusId);
            if (DigestUtils.md5Hex(oldPassword).equals(cusInfo.getPwd())) {
                WebUtil.getSession().setAttribute("modifyMobileCusId", cusId);
            } else {
                return Message.warn("原密码错误！");
            }
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }


    /**
     * 修改手机号码-设置新号码
     *
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/modifyMobile", method = RequestMethod.POST)
    public Message modifyMobile(@CurrentUser Long cusId, String mobileNo, String captcha) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException {
        mobileNo = decrypt(mobileNo);
        captcha = decrypt(captcha);
        Assert.hasText(mobileNo, "新手机号码不能为空");
        Assert.hasText(captcha, "验证码不能为空");

        // 从session中取出已验证通过的用户标识
        Long setPayPwdCusId = (Long) WebUtil.getSession().getAttribute("modifyMobileCusId");
        if (cusId.equals(setPayPwdCusId)) {
            // 短信验证码
            if (loginSmsService.loginMobileNoCheck(mobileNo, captcha, ConfigUtils.config.getProperty("modifyMobile"))) {  // 短信验证通过
                List<CusInfo> cusInfoList =
                        cusInfoBaseService.findList(null, Arrays.asList(Filter.eq("mobile", mobileNo)), null);
                if (CollectionUtil.isNotEmpty(cusInfoList)) {
                    throw BaseException.errorByErrInfo("手机号已存在！");
                }

                CusInfo cusInfo = cusInfoBaseService.find(cusId);
                cusInfo.setMobile(mobileNo);
                cusInfo.setAccount(mobileNo); // 更新手机号码的同时，要更新账号为新的手机号码
                cusInfoBaseService.update(cusInfo);
                // 移除session
                WebUtil.getSession().removeAttribute("modifyMobileCusId");
            } else {  // 短信验证不通过
                return Message.warn("短信验证码错误！");
            }
        } else {
            throw BaseException.errorByErrInfo("非法操作");
        }

        return Message.success("");
    }


    /**
     * 获取我的业绩
     *
     * @param cusId 当前登录用户ID
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/getMyAchievement", method = RequestMethod.GET)
    public Message getMyAchievement(@CurrentUser Long cusId) {
        return Message.success("").addResult(cusInfoService.getMyAchievement(cusId));
    }
}
